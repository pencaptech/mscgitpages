{"version":3,"sources":["components/Public/Register.js","components/Forms/FormValidator.js"],"names":["Register","state","loading","formRegister","fname","email","password","password2","terms","validateOnChange","event","_objectSpread3","input","target","form","value","type","checked","result","FormValidator","validate","_this","setState","Object","E_Rakesh_Workspace_java_outsourced_duplicates_MSC_Chemicals_UI_Admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__","name","E_Rakesh_Workspace_java_outsourced_duplicates_MSC_Chemicals_UI_Admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__","errors","onSubmit","e","inputs","E_Rakesh_Workspace_java_outsourced_duplicates_MSC_Chemicals_UI_Admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","elements","filter","i","includes","nodeName","_FormValidator$bulkVa","bulkValidate","hasError","preventDefault","userObj","fetch","server_url","context_path","method","headers","Content-Type","body","JSON","stringify","then","response","json","data","status","props","actions","login","user","history","push","loginError","message","catch","error","formName","inputName","react__WEBPACK_IMPORTED_MODULE_8___default","a","createElement","className","react_router_dom__WEBPACK_IMPORTED_MODULE_10__","to","src","alt","this","reactstrap__WEBPACK_IMPORTED_MODULE_11__","id","placeholder","invalid","onChange","data-validate","data-param","label","Component","element","isCheckbox","Error","validations","parse","getAttribute","length","forEach","m","key","isValid","validator","isEmpty","obj","msg","isEmail","isNumeric","isInt","isAlphanumeric","isURL","value2","document","getElementById","param","equals","isLength","min","Number","max","_JSON$parse","_JSON$parse2","E_Rakesh_Workspace_java_outsourced_duplicates_MSC_Chemicals_UI_Admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","toInt","list","isIn","E_Rakesh_Workspace_java_outsourced_duplicates_MSC_Chemicals_UI_Admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","E_Rakesh_Workspace_java_outsourced_duplicates_MSC_Chemicals_UI_Admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"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","file":"static/js/11.6e6d0815.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PageLoader from '../Common/PageLoader';\r\nimport { Link } from 'react-router-dom';\r\nimport { Input, CustomInput } from 'reactstrap';\r\n\r\nimport FormValidator from '../Forms/FormValidator.js';\r\nimport { server_url, context_path} from '../Common/constants';\r\n\r\nclass Register extends Component {\r\n\r\n    state = {\r\n        loading: false,\r\n        formRegister: {\r\n            fname: '',\r\n            email: '',\r\n            password: '',\r\n            password2: '',\r\n            terms: false\r\n        }\r\n    }\r\n\r\n     /**\r\n      * Validate input using onChange event\r\n      * @param  {String} formName The name of the form in the state object\r\n      * @return {Function} a function used for the event\r\n      */\r\n    validateOnChange = event => {\r\n        const input = event.target;\r\n        const form = input.form\r\n        const value = input.type === 'checkbox' ? input.checked : input.value;\r\n\r\n        const result = FormValidator.validate(input);\r\n\r\n        this.setState({\r\n            [form.name]: {\r\n                ...this.state[form.name],\r\n                [input.name]: value,\r\n                errors: {\r\n                    ...this.state[form.name].errors,\r\n                    [input.name]: result\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    onSubmit = e => {\r\n        const form = e.target;\r\n        const inputs = [...form.elements].filter(i => ['INPUT', 'SELECT'].includes(i.nodeName))\r\n\r\n        const { errors, hasError } = FormValidator.bulkValidate(inputs)\r\n\r\n        this.setState({\r\n            [form.name]: {\r\n                ...this.state[form.name],\r\n                errors\r\n            }\r\n        });\r\n\r\n        e.preventDefault();\r\n\r\n        let userObj = { name: this.state.formRegister.fname, email: this.state.formRegister.email, password: this.state.formRegister.password }\r\n        fetch(server_url + context_path + 'register',\r\n            {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(userObj)\r\n            })\r\n            .then(response => {\r\n                return response.json()\r\n            })\r\n            .then(data => {\r\n                if (data.status === 200 || data.status === 201) {\r\n                    this.props.actions.login(data.user);\r\n                    this.props.history.push('/dashboard');\r\n                } else {\r\n                    this.setState({ loginError: data.message });\r\n                }\r\n\r\n                // this.props.actions.login(response);\r\n                //    this.props.history.push('/dashboard')\r\n            })\r\n            .catch(error => {\r\n\r\n                this.setState({ loginError: 'Error while processing' });\r\n            });;\r\n    }\r\n\r\n    /* Simplify error check */\r\n    hasError = (formName, inputName, method) => {\r\n        return  this.state[formName] &&\r\n                this.state[formName].errors &&\r\n                this.state[formName].errors[inputName] &&\r\n                this.state[formName].errors[inputName][method]\r\n    }\r\n\r\n    render() {\r\n        const CSS = \".wrapper{background: #2b3eb7} .card {min-height: 400px; max-width: 400px; margin: calc(50vh - 200px) auto 0 !important;} .card img {height: 75px} .btn-primary, .btn-primary:hover, .btn-primary:active, .btn-primary:focus {color: #fff !important; background-color: #2b3eb7 !important; border-color: #2b3eb7 !important; box-shadow: none !important;} .custom-control-label:before,.custom-control-label:after {top: -0.07rem;left: -1.5rem;}\";\r\n\r\n        return (\r\n            <div className=\"block-center\">\r\n                <style>{CSS}</style>\r\n                {/* START card */}\r\n                <div className=\"card card-flat\">\r\n                    <div className=\"card-header text-center bg-default\">\r\n                        <Link to=\"\">\r\n                            <img className=\"block-center\" src=\"img/logo-dark.png\" alt=\"Logo\"/>\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <p className=\"text-center py-2\">SIGNUP TO GET INSTANT ACCESS.</p>\r\n                        <form className=\"mb-3\" name=\"formRegister\" onSubmit={this.onSubmit}>\r\n                            <div className=\"form-group\">\r\n                                <div className=\"input-group with-focus\">\r\n                                    <Input type=\"text\"\r\n                                        id=\"id-fname\"\r\n                                        name=\"fname\"\r\n                                        className=\"border-right-0\"\r\n                                        placeholder=\"Name\"\r\n                                        invalid={this.hasError('formRegister','fname','required')}\r\n                                        onChange={this.validateOnChange}\r\n                                        data-validate='[\"required\"]'\r\n                                        value={this.state.formRegister.fname}\r\n                                    />\r\n                                    <div className=\"input-group-append\">\r\n                                        <span className=\"input-group-text text-muted bg-transparent border-left-0\">\r\n                                            <em className=\"fa fa-edit\"></em>\r\n                                        </span>\r\n                                    </div>\r\n                                    <span className=\"invalid-feedback\">Field is required</span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <div className=\"input-group with-focus\">\r\n                                    <Input type=\"email\"\r\n                                        name=\"email\"\r\n                                        className=\"border-right-0\"\r\n                                        placeholder=\"Enter email\"\r\n                                        invalid={this.hasError('formRegister','email','required')||this.hasError('formRegister','email','email')}\r\n                                        onChange={this.validateOnChange}\r\n                                        data-validate='[\"required\", \"email\"]'\r\n                                        value={this.state.formRegister.email}/>\r\n                                    <div className=\"input-group-append\">\r\n                                        <span className=\"input-group-text text-muted bg-transparent border-left-0\">\r\n                                            <em className=\"fa fa-envelope\"></em>\r\n                                        </span>\r\n                                    </div>\r\n                                    { this.hasError('formRegister','email','required') && <span className=\"invalid-feedback\">Field is required</span> }\r\n                                    { this.hasError('formRegister','email','email') && <span className=\"invalid-feedback\">Field must be valid email</span> }\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <div className=\"input-group with-focus\">\r\n                                    <Input type=\"password\"\r\n                                        id=\"id-password\"\r\n                                        name=\"password\"\r\n                                        className=\"border-right-0\"\r\n                                        placeholder=\"Password\"\r\n                                        invalid={this.hasError('formRegister','password','required')}\r\n                                        onChange={this.validateOnChange}\r\n                                        data-validate='[\"required\"]'\r\n                                        value={this.state.formRegister.password}\r\n                                    />\r\n                                    <div className=\"input-group-append\">\r\n                                        <span className=\"input-group-text text-muted bg-transparent border-left-0\">\r\n                                            <em className=\"fa fa-lock\"></em>\r\n                                        </span>\r\n                                    </div>\r\n                                    <span className=\"invalid-feedback\">Field is required</span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <div className=\"input-group with-focus\">\r\n                                    <Input type=\"password\" name=\"password2\"\r\n                                        className=\"border-right-0\"\r\n                                        placeholder=\"Retype assword\"\r\n                                        invalid={this.hasError('formRegister','password2','equalto')}\r\n                                        onChange={this.validateOnChange}\r\n                                        data-validate='[\"equalto\"]'\r\n                                        value={this.state.formRegister.password2}\r\n                                        data-param=\"id-password\"\r\n                                    />\r\n                                    <div className=\"input-group-append\">\r\n                                        <span className=\"input-group-text text-muted bg-transparent border-left-0\">\r\n                                            <em className=\"fa fa-lock\"></em>\r\n                                        </span>\r\n                                    </div>\r\n                                    <span className=\"invalid-feedback\">Field must be equal to previous</span>\r\n                                </div>\r\n                            </div>\r\n                            <CustomInput type=\"checkbox\" id=\"terms\"\r\n                                name=\"terms\"\r\n                                label=\"I agree with the terms\"\r\n                                invalid={this.hasError('formRegister','terms','required')}\r\n                                onChange={this.validateOnChange}\r\n                                data-validate='[\"required\"]'\r\n                                checked={this.state.formRegister.terms}>\r\n                                    <span className=\"invalid-feedback\">Field is required</span>\r\n                                </CustomInput>\r\n                            <button className=\"btn btn-raised btn-block btn-primary mt-3\" type=\"submit\">Create account</button>\r\n                        </form>\r\n                    </div>\r\n                    <div className=\"card-footer text-center\">\r\n                        <Link to=\"login\" className=\"text-muted\">Back to Login</Link>\r\n                    </div>\r\n                </div>\r\n                {/* END card */}\r\n                <div className=\"p-3 text-center\">\r\n                    <span className=\"mr-2\">&copy;</span>\r\n                    <span>2019</span>\r\n                    <span className=\"mx-2\">-</span>\r\n                    <span>MSC Chemicals</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Register;\r\n","// https://github.com/chriso/validator.js\r\nimport validator from 'validator';\r\n\r\n/**\r\n * Helper methods to validate form inputs\r\n * using controlled components\r\n */\r\nconst FormValidator = {\r\n    /**\r\n     * Validate input element\r\n     * @m.param element Dome element of the input\r\n     * Uses the following attributes\r\n     *     data-validate: array in json format with validation methods\r\n     *     data-m.param: used to provide arguments for certain methods.\r\n     */\r\n    validate(element) {\r\n\r\n        const isCheckbox = element.type === 'checkbox';\r\n        const value = isCheckbox ? element.checked : element.value;\r\n        const name = element.name;\r\n\r\n        if (!name) throw new Error('Input name must not be empty.');\r\n\r\n        // use getAttribute to support IE10+\r\n         const validations = JSON.parse(element.getAttribute('data-validate'));\r\n        \r\n        let result = []\r\n        if(validations && validations.length) {\r\n            /*  Result of each validation must be true if the input is invalid\r\n                and false if valid. */\r\n                \r\n            validations.forEach(m => {\r\n                switch (m.key) {\r\n                    case 'required':\r\n                        \r\n                        var isValid=isCheckbox ? value === false : validator.isEmpty(value);\r\n                        if(isValid){\r\n                            var obj= {key:m.key,msg:'Field is mandatory'}\r\n                            result.push(obj);\r\n                        }\r\n                        break;\r\n                    case 'email':\r\n                        var isValid =!validator.isEmail(value);\r\n                        if(isValid){\r\n                            var obj= {key:m.key,msg:'Please enter valid email'}\r\n                            result.push(obj);\r\n                        }\r\n                        break;\r\n                    case 'number':\r\n                        var isValid =  !validator.isNumeric(value);\r\n                        if(isValid){\r\n                        \r\n                        var obj= {key:m.key,msg:'Field should be number'}\r\n                            result.push(obj);\r\n                        }\r\n                        break;\r\n                    case 'integer':\r\n                        var isValid = !validator.isInt(value);\r\n                        if(isValid){\r\n                            var obj= {key:m.key,msg:'Field should be integer'}\r\n                            result.push(obj);\r\n                        \r\n                        }\r\n                        break;\r\n                    case 'alphanum':\r\n                        var isValid = !validator.isAlphanumeric(value);\r\n                        if(isValid){\r\n                            var obj= {key:m.key,msg:'Field should be alpha numeric'}\r\n                            result.push(obj);\r\n                        \r\n                        }\r\n                        break;\r\n                    case 'url':\r\n                        var isValid = !validator.isURL(value);\r\n                        if(isValid){\r\n                            var obj= {key:m.key,msg:'Field should be url'}\r\n                            result.push(obj);\r\n                        \r\n                        }\r\n                        break;\r\n                    case 'equalto':\r\n                        // here we expect a valid ID as m.param\r\n                        const value2 = document.getElementById(m.param).value;\r\n                        var isValid = !validator.equals(value, value2);\r\n                        if(isValid){\r\n                            var obj= {key:m.key,msg:'Field should be match'}\r\n                            result.push(obj);\r\n                        \r\n                        }\r\n                        break;\r\n                    case 'minlen':\r\n                        var isValid = !validator.isEmpty(value) && !validator.isLength(value, { min: Number(m.param) });\r\n                        if(isValid){\r\n                            var obj= {key:m.key,msg:'Field should have minimum length: '+m.param}\r\n                            result.push(obj);\r\n                        }\r\n                        break;\r\n                    case 'maxlen':\r\n                        var isValid = !validator.isEmpty(value) && !validator.isLength(value, { max: Number(m.param) });\r\n                        if(isValid){\r\n                            var obj= {key:m.key,msg:'Field should have maximum length: '+m.param}\r\n                            result.push(obj);\r\n                        }\r\n                        break;\r\n                    case 'len':\r\n                        const [min, max] = JSON.parse(m.param)\r\n                        var isValid = !validator.isEmpty(value) &&  !validator.isLength(value, { min, max });\r\n                        if(isValid){\r\n                            var obj= {key:m.key,msg:'Field should have min length '+min+' maximum length: '+max}\r\n                            result.push(obj);}\r\n                        break;\r\n                    case 'min':\r\n                        var isValid = !validator.isInt(value, { min: validator.toInt(m.param) });\r\n                        if(isValid){\r\n                        var obj=  {key:m.key,msg:'Field should have minimum characters'};\r\n                        result.push(obj);\r\n                        }\r\n                        break;\r\n                    case 'max':\r\n                        var isValid = !validator.isInt(value, { max: validator.toInt(m.param) });\r\n                        if(isValid){\r\n                            var obj=  {key:m.key,msg:'Field should not exceed maximum characters'};\r\n                            result.push(obj);  \r\n                    }\r\n                        break;\r\n                    case 'list':\r\n                        const list = JSON.parse(m.param)\r\n                        var isValid = !validator.isIn(value, list);\r\n                        if(isValid){\r\n                            var obj=  {status:isValid,message: isValid?'Invalid value':''};\r\n                        }\r\n                        break;\r\n                    default:\r\n                        throw new Error('Unrecognized validator.');\r\n                }\r\n\r\n            })\r\n        }\r\n        \r\n        return result;\r\n    },\r\n\r\n    /**\r\n     * Bulk validation of input elements.\r\n     * Used with form elements collection.\r\n     * @m.param  {Array} inputs Array for DOM element\r\n     * @return {Object}       Contains array of error and a flag to\r\n     *                        indicate if there was a validation error\r\n     */\r\n    bulkValidate(inputs) {\r\n        let errors = {},\r\n            hasError = false;\r\n\r\n        inputs.forEach(input => {\r\n            let result = this.validate(input)\r\n            \r\n            if (!hasError){\r\n                hasError=result.length>0;\r\n                \r\n            } \r\n            errors = { ...errors, [input.name]: result }\r\n            \r\n            \r\n        })\r\n        \r\n        return {\r\n            errors,\r\n            hasError\r\n        }\r\n    }\r\n}\r\n\r\nexport default FormValidator;"],"sourceRoot":""}